function Channel ...
    = Generate_Channels( ...
    TX_location_shifted, ...
    RX_location_shifted, ....
    VUE_NS_direction_TX, ....
    VUE_NS_direction_RX, ...
    VUE_EW_direction_TX, ...
    VUE_EW_direction_RX, ...
    random_seed ...
    )
% channel matrix
% rows - TX index
% columns - RX index
% block - RB index

%% Globals
global pathloss_coefficient pathloss_coefficient_NLOS pathloss_exponent
global distance_threshold_channel total_VUE_pairs total_resource_blocks

%% manupilate random state
current_random_state = rng;
rng(random_seed);

%%
Channel = zeros( total_VUE_pairs, total_VUE_pairs, total_resource_blocks);

for tx = 1:total_VUE_pairs
    LOS_indicator = logical( ...
        abs(VUE_NS_direction_TX(tx)*VUE_NS_direction_RX).*...
        (abs(TX_location_shifted(tx,1)-RX_location_shifted(:,1))<=4)...
        + abs(VUE_EW_direction_TX(tx)*VUE_EW_direction_RX).*...
        (abs(TX_location_shifted(tx,2)-RX_location_shifted(:,2))<=4) ...
        );
    perpendicular_lane_indicator = ( ...
        abs(VUE_NS_direction_TX(tx)*VUE_NS_direction_RX) ...
        + abs(VUE_EW_direction_TX(tx)*VUE_EW_direction_RX) ...
        ) < 1;
    relative_location = ...
        bsxfun(@plus, RX_location_shifted, -TX_location_shifted(tx,:));
    WLOS_indicator = logical(...
        ( min(abs(relative_location(:,1)), abs(relative_location(:,2))) ...
        <= distance_threshold_channel ).* perpendicular_lane_indicator ...
        );
    NLOS_indicator = ~(LOS_indicator+WLOS_indicator);
    
    %% LOS model
    Channel(tx, LOS_indicator, :) = reshape( bsxfun(@times,...
        pathloss_coefficient*...
        ( sqrt( sum( relative_location(LOS_indicator,:).^2, 2))...
        ).^(-pathloss_exponent), ...
        exprnd(1, [1, total_resource_blocks]) ), ...
        [1, sum(LOS_indicator), total_resource_blocks ] );
    %% WLOS model
    Channel(tx, WLOS_indicator, :) = reshape( bsxfun(@times, ...
        pathloss_coefficient*...
        ( sum( abs(relative_location(WLOS_indicator,:)), 2)...
        ).^(-pathloss_exponent), ...
        exprnd(1, [1, total_resource_blocks]) ), ...
        [1, sum(WLOS_indicator), total_resource_blocks ] );
    %% NLOS model
    Channel(tx, NLOS_indicator, :) = reshape( bsxfun(@times,...
        pathloss_coefficient_NLOS*...
        ( prod( abs( relative_location(NLOS_indicator,:)), 2)...
        ).^(-pathloss_exponent), ...
        exprnd(1, [1, total_resource_blocks]) ), ...
        [1, sum(NLOS_indicator), total_resource_blocks ] );
end

%% restore original random state
rng(current_random_state);

end